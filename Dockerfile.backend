# Multi-stage build for Go backend (probod)
FROM golang:alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set Go toolchain to use available version and allow auto-upgrade
ENV GOTOOLCHAIN=auto

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY go.mod go.sum ./

# Copy source files needed for generation
COPY pkg/ pkg/
COPY cmd/ cmd/
COPY internal/ internal/

# Clean up dependencies and download
RUN go mod tidy && go mod download && go mod verify

# Install tools needed for generation
RUN go install github.com/99designs/gqlgen@latest

# Generate GraphQL schema and types
RUN go generate ./pkg/server/api/console/v1

# Copy remaining source files
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -X "main.version=production" -X "main.env=prod"' \
    -a -installsuffix cgo \
    -o probod \
    ./cmd/probod

# Final stage: minimal runtime image
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata && \
    addgroup -g 1000 probo && \
    adduser -D -s /bin/sh -u 1000 -G probo probo

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/probod ./probod

# Copy migration files
COPY --from=builder /app/pkg/coredata/migrations ./migrations

# Copy configuration files
COPY --from=builder /app/cfg ./cfg

# Copy static data files
COPY --from=builder /app/data ./data

# Change ownership to probo user
RUN chown -R probo:probo /app

# Switch to non-root user
USER probo

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/health || exit 1

# Command to run the application
ENTRYPOINT ["./probod"]