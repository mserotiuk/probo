# Multi-stage build for React frontend
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files for dependency caching
COPY package*.json turbo.json ./

# Copy workspace package files individually
COPY apps/console/package*.json ./apps/console/
COPY packages/esbuild-plugin-postcss/package.json ./packages/esbuild-plugin-postcss/
COPY packages/helpers/package.json ./packages/helpers/
COPY packages/hooks/package.json ./packages/hooks/
COPY packages/i18n/package.json ./packages/i18n/
COPY packages/prettier/package.json ./packages/prettier/
COPY packages/react-lazy/package.json ./packages/react-lazy/
COPY packages/tsconfig/package.json ./packages/tsconfig/
COPY packages/ui/package.json ./packages/ui/
COPY packages/vendors/package.json ./packages/vendors/

# Install dependencies
RUN npm ci --frozen-lockfile

# Copy source code
COPY . .

# Generate Relay artifacts
RUN npm run relay

# Build the console application in production mode
ENV NODE_ENV=production
RUN npm run build --workspace=@probo/console

# Production stage: serve with nginx
FROM nginx:1.25-alpine

# Install runtime dependencies
RUN apk --no-cache add ca-certificates

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create nginx user and directories
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    chown -R nginx:nginx /var/cache/nginx

# Copy built application
COPY --from=builder /app/apps/console/dist /usr/share/nginx/html

# Copy static assets
RUN chown -R nginx:nginx /usr/share/nginx/html

# Switch to nginx user
USER nginx

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]