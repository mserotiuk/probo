# Production Dockerfile - Combined frontend and backend
# This creates a single container that serves both the API and frontend
FROM node:22-alpine AS frontend-builder

# Set Node.js memory limit and npm configuration
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_FUND=false
ENV CI=true

# Build frontend
WORKDIR /app

# Copy root package files
COPY package*.json turbo.json ./

# Copy workspace package files individually for better caching
COPY apps/console/package*.json ./apps/console/
COPY packages/esbuild-plugin-postcss/package.json ./packages/esbuild-plugin-postcss/
COPY packages/helpers/package.json ./packages/helpers/
COPY packages/hooks/package.json ./packages/hooks/
COPY packages/i18n/package.json ./packages/i18n/
COPY packages/prettier/package.json ./packages/prettier/
COPY packages/react-lazy/package.json ./packages/react-lazy/
COPY packages/tsconfig/package.json ./packages/tsconfig/
COPY packages/ui/package.json ./packages/ui/
COPY packages/vendors/package.json ./packages/vendors/

# Install dependencies with optimizations
RUN npm ci --frozen-lockfile --no-audit --no-fund

COPY . .
RUN npm run relay
ENV NODE_ENV=production
RUN npm run build --workspace=@probo/console

# Build Go backend
FROM golang:alpine AS backend-builder

# Set Go toolchain to use available version and allow auto-upgrade
ENV GOTOOLCHAIN=auto

WORKDIR /app

# Copy dependency files and source needed for generation
COPY go.mod go.sum ./
COPY pkg/ pkg/
COPY cmd/ cmd/
COPY internal/ internal/

# Clean dependencies and download
RUN go mod tidy && go mod download && go mod verify

# Install tools needed for generation
RUN go install github.com/99designs/gqlgen@latest

# Generate GraphQL schema and types
RUN go generate ./pkg/server/api/console/v1

# Copy remaining source files  
COPY . .

RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -X "main.version=production" -X "main.env=prod"' \
    -a -installsuffix cgo \
    -o probod \
    ./cmd/probod

# Final production stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata nginx supervisor wget && \
    addgroup -g 1000 probo && \
    adduser -D -s /bin/sh -u 1000 -G probo probo

# Create necessary directories
RUN mkdir -p /app /var/log/supervisor /run/nginx /var/cache/nginx /tmp && \
    chown -R probo:probo /app && \
    chmod 755 /app

WORKDIR /app

# Copy backend binary and assets
COPY --from=backend-builder /app/probod ./probod
COPY --from=backend-builder /app/pkg/coredata/migrations ./migrations
COPY --from=backend-builder /app/cfg ./cfg
COPY --from=backend-builder /app/data ./data

# Copy migration script
COPY scripts/migrate.sh ./scripts/migrate.sh
RUN chmod +x ./scripts/migrate.sh

# Copy frontend build
COPY --from=frontend-builder /app/apps/console/dist ./public

# Copy configuration files
COPY nginx.conf /etc/nginx/nginx.conf
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Change ownership for app files
RUN chown -R probo:probo /app

# Stay as root (supervisord needs root for nginx port 8080)

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/health || exit 1

# Start supervisor (manages both nginx and probod)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]